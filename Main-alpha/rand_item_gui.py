def log_message(*args, **kwargs):
    with open('logs.txt', 'a', encoding='utf-8') as f:
        print(*args, **kwargs, file=f)
import os
import random
import tkinter as tk
from tkinter import simpledialog, messagebox
import json
#–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Ä–µ–¥–∫–æ—Å—Ç–µ–π
from rarity_map import rarities

RARITY_WEIGHTS = {
    "–ö—É—Å—Ç–∞—Ä–Ω–æ–µ": 30,
    "–ó–∞—É—Ä—è–¥–Ω–æ–µ": 35,
    "–°–æ–ª–∏–¥–Ω–æ–µ": 13,
    "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ": 12,
    "–ù–µ–º—ã—Å–ª–∏–º–æ–µ": 8,
    "–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ": 1,
    "–ü—Ä–æ—Ä—ã–≤–Ω–æ–µ": 1,
}

RARITY_CATEGORIES = [rarity.name for rarity in rarities.values()]
RARITY_CATEGORIES_GUI = RARITY_CATEGORIES + ['–†–∞—Å—Ö–æ–¥–Ω–∏–∫']
log_message(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏: {RARITY_CATEGORIES_GUI}")

BASE_DIR = os.path.abspath(os.path.dirname(__file__))

#–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
def scan_files(json_filename, selected_rarities):
    matched_items = {}
    log_message(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {matched_items}")

    items_json_path = os.path.join(os.path.dirname(__file__), 'items.json')
    with open(items_json_path, 'r', encoding='utf-8') as f:
        items = json.load(f)

        for item in items:
            item_name = item.get('name', None)
            item_rarity = item.get('rarity', '').lower() if 'rarity' in item else None
            if item_rarity:
                for rarity in RARITY_CATEGORIES:
                    if item_rarity == rarity.lower() and rarity in selected_rarities:
                        matched_items[item_name] = rarity
                        break
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑ —Ä–µ–¥–∫–æ—Å—Ç–∏, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–º
                if '–†–∞—Å—Ö–æ–¥–Ω–∏–∫' in selected_rarities:
                    matched_items[item_name] = '–†–∞—Å—Ö–æ–¥–Ω–∏–∫'

    log_message(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {matched_items}")
    return matched_items

def select_random_items(matched_files, total_count):
    items = list(matched_files.items())  # [(name, rarity), ...]
    if not items:
        return []

    # –°–æ–∑–¥–∞—ë–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø—É–ª –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    weighted_pool = []
    for name, rarity in items:
        weight = RARITY_WEIGHTS.get(rarity, 1)
        weighted_pool.extend([(name, rarity)] * weight)

    if not weighted_pool:
        return []

    selected = []
    used = set()
    while len(selected) < min(total_count, len(items)) and weighted_pool:
        choice = random.choice(weighted_pool)
        if choice not in used:
            selected.append(choice)
            used.add(choice)
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞
        weighted_pool = [item for item in weighted_pool if item != choice]

    return selected


def show_info(path):
    # –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ –∏–∑ items.json
    root.clipboard_clear()
    root.clipboard_append(path)

    # path —Ç–µ–ø–µ—Ä—å –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
    item_name = path
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    items_json_path = os.path.join(os.path.dirname(__file__), 'items.json')
    with open(items_json_path, 'r', encoding='utf-8') as f:
        items = json.load(f)

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∏–º–µ–Ω–∏
    item = next((i for i in items if i.get('name') == item_name), None)

    viewer = tk.Toplevel()
    viewer.title(item_name)

    text_widget = tk.Text(viewer, wrap='word', width=80, height=25)
    text_widget.pack(expand=False, fill='both')

    if item:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ä—É–∂–∏–µ —ç—Ç–æ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫
        if 'rarity' in item:
            # –û—Ä—É–∂–∏–µ
            info = f"–ò–º—è: {item.get('name', '')}\n"
            info += f"–†–µ–¥–∫–æ—Å—Ç—å: {item.get('rarity', '')}\n"
            info += f"–¶–µ–Ω–∞: {item.get('price', '')}\n"
            info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '')}\n"
            info += f"–¢–∏–ø: {item.get('type', '')}\n"
            info += f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {item.get('range', '')}\n"
            info += f"–£—Ä–æ–Ω: {item.get('damage', '')}\n"
            info += f"–ó–∞–º–µ—Ç–∫–∞: {item.get('note', '')}\n"
            info += f"–ë–æ–µ–ø—Ä–∏–ø–∞—Å—ã: {item.get('ammo', '')}\n"
        else:
            # –†–∞—Å—Ö–æ–¥–Ω–∏–∫
            info = f"–ò–º—è: {item.get('name', '')}\n"
            info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {item.get('description', '')}\n"
        text_widget.insert('1.0', info)
    else:
        text_widget.insert('1.0', f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    text_widget.config(state='disabled')


def run_randomizer():
    total_count = simpledialog.askinteger("–°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤?", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", minvalue=1)
    if not total_count:
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    selected_rarities = [rarity for rarity, var in rarity_vars.items() if var.get()]
  
    log_message(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏: {selected_rarities}")

    if not selected_rarities:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–µ–¥–∫–æ—Å—Ç—å!")
        return

    #!!!!! –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    matched_files = scan_files("items.json", selected_rarities)
    # –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    #filtered_files = {rarity: matched_files[rarity] for rarity in selected_rarities}

    selected_items = select_random_items(matched_files, total_count)
    log_message(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {selected_items}")

    if not selected_items:
        messagebox.showinfo("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π.")
        return

    result_window = tk.Toplevel()
    result_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞")

    for name, rarity in selected_items:
        frame = tk.Frame(result_window)
        frame.pack(fill='x', pady=2, padx=5)

        tk.Label(frame, text=f"{rarity} ‚Üí {name}").pack(side='left', anchor='w')
        tk.Button(frame, text="üìã", command=lambda n=name: show_info(n)).pack(side='right')

##
### GUI
##root = tk.Tk()
##root.title("–†–∞–Ω–¥–æ–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è D&D")
##root.geometry("400x400")
##
##tk.Label(root, text="üé≤ –†–∞–Ω–¥–æ–º–∏–∑–∞—Ç–æ—Ä –ò–Ω–≤–µ–Ω—Ç–∞—Ä—è").pack(pady=10)
##
### –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
##rarity_frame = tk.LabelFrame(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç–∏", padx=10, pady=5)
##rarity_frame.pack(pady=5, fill='both', padx=10)
##
##rarity_vars = {}
##for rarity in RARITY_CATEGORIES_GUI:
##    var = tk.BooleanVar(value=True)
##    chk = tk.Checkbutton(rarity_frame, text=rarity, variable=var)
##    chk.pack(anchor='w')
##    rarity_vars[rarity] = var
##
##tk.Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=run_randomizer, bg="lightgreen").pack(pady=15)
##
##root.mainloop()
##